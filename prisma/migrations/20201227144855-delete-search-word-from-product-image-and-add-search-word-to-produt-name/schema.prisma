generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model User {
  id              Int            @id @default(autoincrement())
  views           View[]
  likes           Like[]
  searchTagLogIds SearchTagLog[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
}

model Product {
  id            Int                 @id @default(autoincrement())
  names         ProductName[]
  images        ProductImage[]
  preferrers    Like[]
  branches      Branch[]
  tags          Tag[]
  posts         Post[]
  description   String?
  instaText     String?
  price         Int?
  externalLink  ProductExternalLink
  videos        ProductVideo[]
  views         View[]
  priority      Int?
  onDetailTagId Int[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
}

model ProductName {
  id         Int      @id @default(autoincrement())
  productId  Int?
  Product    Product? @relation(fields: [productId], references: [id])
  lang       String
  word       String
  searchWord String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int?
  Product   Product? @relation(fields: [productId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductVideo {
  id        Int      @id @default(autoincrement())
  productId Int?
  Product   Product? @relation(fields: [productId], references: [id])
  url       String
  order     Int
  isYoutube Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductExternalLink {
  id        Int      @id @default(autoincrement())
  url       String
  order     Int
  linkType  LinkType
  productId Int?
  Product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Shop {
  id                   Int                @id @default(autoincrement())
  names                ShopName[]
  branches             Branch[]
  externalLinks        ShopExternalLink[]
  logoUrl              String?
  description          String?
  images               ShopImage[]
  videos               ShopVideo[]
  phoneNumber          String
  preferrers           Like[]
  tags                 Tag[]
  posts                Post[]
  views                View[]
  monthlyRankScore     Float?
  monthlyRankNum       Int
  priority             Int?
  onDetailTagId        Int[]
  externalLinkClickNum Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
}

model ShopName {
  id         Int      @id @default(autoincrement())
  shopId     Int?
  Shop       Shop?    @relation(fields: [shopId], references: [id])
  lang       String
  word       String   @unique
  searchWord String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model ShopImage {
  id        Int      @id @default(autoincrement())
  shopId    Int?
  Shop      Shop?    @relation(fields: [shopId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ShopVideo {
  id        Int      @id @default(autoincrement())
  shopId    Int?
  Shop      Shop?    @relation(fields: [shopId], references: [id])
  url       String
  order     Int
  isYoutube Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ShopExternalLink {
  id        Int      @id @default(autoincrement())
  url       String
  linkType  LinkType
  shopId    Int?
  Shop      Shop?    @relation(fields: [shopId], references: [id])
  order     Int
  onBottom  Boolean
  isShown   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Branch {
  id           Int          @id @default(autoincrement())
  shopId       Int?
  Shop         Shop?        @relation(fields: [shopId], references: [id])
  names        BranchName[]
  phoneNumbers String[]
  products     Product[]
  address      String
  googleMapUrl String?
  longitude    Float?
  latitude     Float?
  isMain       Boolean
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
}

model BranchName {
  id         Int      @id @default(autoincrement())
  branchId   Int?
  Branch     Branch?  @relation(fields: [branchId], references: [id])
  lang       String
  word       String
  searchWord String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Event {
  id             Int                  @id @default(autoincrement())
  images         EventImage[]
  videos         EventVideo[]
  preferrers     Like[]
  url            String?
  dueDate        DateTime
  bannerImage    String
  tags           Tag[]
  views          View[]
  isOnList       Boolean
  title          String
  searchTitle    String               @default("")
  onDetailTagId  Int[]
  contentsImages EventContentsImage[]
  startDate      DateTime
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
}

model EventImage {
  id        Int      @id @default(autoincrement())
  eventId   Int?
  Event     Event?   @relation(fields: [eventId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EventVideo {
  id        Int      @id @default(autoincrement())
  eventId   Int?
  Event     Event?   @relation(fields: [eventId], references: [id])
  url       String
  order     Int
  isYoutube Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EventContentsImage {
  id        Int      @id @default(autoincrement())
  eventId   Int?
  Event     Event?   @relation(fields: [eventId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Category {
  Location
  ProductClass
  Style
  Price
  Feature
  ShopName
}

enum LinkType {
  Instagram
  Facebook
  FacebookMessanger
  Youtube
  TikTok
  Shopee
  Sendo
  LAZADA
  Tiki
  OnlineShop
  Cafe24
}

model Class {
  id        Int         @id @default(autoincrement())
  names     ClassName[]
  tags      Tag[]
  category  Category
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model ClassName {
  id         Int      @id @default(autoincrement())
  classId    Int?
  Class      Class?   @relation(fields: [classId], references: [id])
  lang       String
  word       String   @unique
  searchWord String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Tag {
  id               Int            @id @default(autoincrement())
  classId          Int
  Class            Class          @relation(fields: [classId], references: [id])
  names            TagName[]
  shops            Shop[]
  posts            Post[]
  products         Product[]
  events           Event[]
  category         Category?
  tagImage         String?
  searchTagLogs    SearchTagLog[]
  isClass          Boolean
  isRecommendation Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
}

model TagName {
  id         Int      @id @default(autoincrement())
  tagId      Int?
  Tag        Tag?     @relation(fields: [tagId], references: [id])
  lang       String
  word       String   @unique
  searchWord String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Post {
  id                   Int                @id @default(autoincrement())
  shopId               Int?
  Shop                 Shop?              @relation(fields: [shopId], references: [id])
  text                 String?
  images               PostImage[]
  preferrers           Like[]
  weeklyRankScore      Float?
  lifeTimeRankScore    Float?
  monthlyRankScore     Float?
  weeklyRankNum        Int?
  monthlyRankNum       Int?
  lifeTimeRankNum      Int?
  products             Product[]
  tags                 Tag[]
  videos               PostVideo[]
  mainProductId        Int?
  mainProductPrice     Int?
  views                View[]
  priority             Int?
  onDetailTagId        Int[]
  isOnline             Boolean
  externalLinkClickNum Int
  postExternalLinks    PostExternalLink[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
}

model PostExternalLink {
  id        Int      @id @default(autoincrement())
  url       String
  order     Int
  linkType  LinkType
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  isShown   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PostImage {
  id        Int      @id @default(autoincrement())
  postId    Int?
  Post      Post?    @relation(fields: [postId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PostVideo {
  id        Int      @id @default(autoincrement())
  postId    Int?
  Post      Post?    @relation(fields: [postId], references: [id])
  url       String
  order     Int
  isYoutube Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model View {
  id        Int      @id @default(autoincrement())
  userId    Int?
  shopId    Int?
  postId    Int?
  eventId   Int?
  productId Int?
  User      User?    @relation(fields: [userId], references: [id])
  Shop      Shop?    @relation(fields: [shopId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
  Event     Event?   @relation(fields: [eventId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int?
  productId Int?
  userId    Int?
  eventId   Int?
  shopId    Int?
  Post      Post?    @relation(fields: [postId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  Event     Event?   @relation(fields: [eventId], references: [id])
  Shop      Shop?    @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Setting {
  id                 Int      @id @default(autoincrement())
  mainBubbleTagId    Int[]
  bestBubbleTagId    Int[]
  shopBubbleTagId    Int[]
  loadingPostNum     Int
  TodaysStylesPeriod DateTime
  bestTotalPostNum   Int
  bestConstA         Float
  bestConstB         Float
  shopConstA         Float
  shopConstB         Float
  shopConstC         Float
  adminEmail         String
  adminEmailPW       String
  mainEventBannerId  Int[]
  QuestionOption     String[]
  SearchPeriod       DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
}

model SearchTagLog {
  id        Int      @id @default(autoincrement())
  tagId     Int?
  userId    Int?
  Tag       Tag?     @relation(fields: [tagId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
