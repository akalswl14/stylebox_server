generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model User {
  id           Int           @id @default(autoincrement())
  likeContents LikeContent[]
  likeShops    LikeShop[]
  likeEvents   LikeEvent[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model Product {
  id            Int            @id @default(autoincrement())
  name          ProductName[]
  image         ProductImage[]
  preferrers    LikeContent[]
  preferrersCnt Int?
  viewCnt       Int?
  shops         Shop[]
  tags          Tag[]
  posts         Post[]
  description   String?
  instaText     String?
  price         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model ProductName {
  id        Int      @id @default(autoincrement())
  productId Int
  Product   Product  @relation(fields: [productId], references: [id])
  lang      String
  word      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  Product   Product  @relation(fields: [productId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Shop {
  id            Int         @id @default(autoincrement())
  name          ShopName[]
  logoUrl       String?
  discription   String?
  images        ShopImage[]
  videos        ShopVideo[]
  phoneNumber   String[]
  products      Product[]
  preferrers    LikeShop[]
  preferrersCnt Int?
  viewCnt       Int?
  coordinate    String?
  address       String[]
  tags          Tag[]
  popularity    Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
}

model ShopName {
  id        Int      @id @default(autoincrement())
  shopId    Int
  Shop      Shop     @relation(fields: [shopId], references: [id])
  lang      String
  word      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ShopImage {
  id        Int      @id @default(autoincrement())
  shopId    Int
  Shop      Shop     @relation(fields: [shopId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ShopVideo {
  id        Int      @id @default(autoincrement())
  shopId    Int
  Shop      Shop     @relation(fields: [shopId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Event {
  id            Int          @id @default(autoincrement())
  discription   String
  images        EventImage[]
  videos        EventVideo[]
  preferrers    LikeEvent[]
  preferrersCnt Int?
  viewCnt       Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

model EventImage {
  id        Int      @id @default(autoincrement())
  eventId   Int?
  Event     Event?   @relation(fields: [eventId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EventVideo {
  id        Int      @id @default(autoincrement())
  eventId   Int?
  Event     Event?   @relation(fields: [eventId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Category {
  Location
  ProductClass
  Style
  Price
}

model Class {
  id        Int            @id @default(autoincrement())
  name      CategoryName[]
  tags      Tag[]
  category  Category
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
}

model CategoryName {
  id        Int      @id @default(autoincrement())
  classId   Int
  Class     Class    @relation(fields: [classId], references: [id])
  lang      String
  word      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Tag {
  id        Int       @id @default(autoincrement())
  classId   Int
  Class     Class     @relation(fields: [classId], references: [id])
  name      TagName[]
  products  Product[]
  shops     Shop[]
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model TagName {
  id        Int      @id @default(autoincrement())
  tagId     Int
  Tag       Tag      @relation(fields: [tagId], references: [id])
  lang      String
  word      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id            Int           @id @default(autoincrement())
  title         String?
  text          String?
  images        PostImage[]
  preferrers    LikeContent[]
  preferrersCnt Int?
  viewCnt       Int?
  publisher     String?
  products      Product[]
  tags          Tag[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

model PostImage {
  id        Int      @id @default(autoincrement())
  postId    Int?
  Post      Post?    @relation(fields: [postId], references: [id])
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model LikeContent {
  id        Int      @id @default(autoincrement())
  postId    Int?
  productId Int?
  userId    Int
  Post      Post?    @relation(fields: [postId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model LikeShop {
  id        Int      @id @default(autoincrement())
  userId    Int
  shopId    Int
  User      User     @relation(fields: [userId], references: [id])
  Shop      Shop     @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model LikeEvent {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  User      User     @relation(fields: [userId], references: [id])
  Event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
