/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Category: { // root type
    id: number; // Int!
  }
  CategoryName: { // root type
    categoryId?: number | null; // Int
    id: number; // Int!
    lang: string; // String!
    word: string; // String!
  }
  Event: { // root type
    discription: string; // String!
    id: number; // Int!
  }
  EventImage: { // root type
    eventId?: number | null; // Int
    id: number; // Int!
    order: number; // Int!
    url: string; // String!
  }
  EventVideo: { // root type
    eventId?: number | null; // Int
    id: number; // Int!
    order: number; // Int!
    url: string; // String!
  }
  Mutation: {};
  Product: { // root type
    id: number; // Int!
    shopId?: number | null; // Int
  }
  ProductImage: { // root type
    id: number; // Int!
    order: number; // Int!
    productId?: number | null; // Int
    url: string; // String!
  }
  ProductName: { // root type
    id: number; // Int!
    lang: string; // String!
    productId?: number | null; // Int
    word: string; // String!
  }
  Query: {};
  Shop: { // root type
    discription: string; // String!
    id: number; // Int!
  }
  ShopImage: { // root type
    id: number; // Int!
    order: number; // Int!
    shopId?: number | null; // Int
    url: string; // String!
  }
  ShopName: { // root type
    id: number; // Int!
    lang: string; // String!
    shopId?: number | null; // Int
    word: string; // String!
  }
  Tag: { // root type
    categoryId?: number | null; // Int
    id: number; // Int!
  }
  TagName: { // root type
    id: number; // Int!
    lang: string; // String!
    tagId?: number | null; // Int
    word: string; // String!
  }
  User: { // root type
    id: number; // Int!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Category: { // field return type
    id: number; // Int!
    name: NexusGenRootTypes['CategoryName'][]; // [CategoryName!]!
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
  }
  CategoryName: { // field return type
    Category: NexusGenRootTypes['Category'] | null; // Category
    categoryId: number | null; // Int
    id: number; // Int!
    lang: string; // String!
    word: string; // String!
  }
  Event: { // field return type
    discription: string; // String!
    id: number; // Int!
    images: NexusGenRootTypes['EventImage'][]; // [EventImage!]!
    videos: NexusGenRootTypes['EventVideo'][]; // [EventVideo!]!
    wishers: NexusGenRootTypes['User'][]; // [User!]!
  }
  EventImage: { // field return type
    Event: NexusGenRootTypes['Event'] | null; // Event
    eventId: number | null; // Int
    id: number; // Int!
    order: number; // Int!
    url: string; // String!
  }
  EventVideo: { // field return type
    Event: NexusGenRootTypes['Event'] | null; // Event
    eventId: number | null; // Int
    id: number; // Int!
    order: number; // Int!
    url: string; // String!
  }
  Mutation: { // field return type
    confirmUser: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
  }
  Product: { // field return type
    id: number; // Int!
    image: NexusGenRootTypes['ProductImage'][]; // [ProductImage!]!
    name: NexusGenRootTypes['ProductName'][]; // [ProductName!]!
    Shop: NexusGenRootTypes['Shop'] | null; // Shop
    shopId: number | null; // Int
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    wishers: NexusGenRootTypes['User'][]; // [User!]!
  }
  ProductImage: { // field return type
    id: number; // Int!
    order: number; // Int!
    Product: NexusGenRootTypes['Product'] | null; // Product
    productId: number | null; // Int
    url: string; // String!
  }
  ProductName: { // field return type
    id: number; // Int!
    lang: string; // String!
    Product: NexusGenRootTypes['Product'] | null; // Product
    productId: number | null; // Int
    word: string; // String!
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  Shop: { // field return type
    discription: string; // String!
    id: number; // Int!
    images: NexusGenRootTypes['ShopImage'][]; // [ShopImage!]!
    name: NexusGenRootTypes['ShopName'][]; // [ShopName!]!
    products: NexusGenRootTypes['Product'][]; // [Product!]!
    wishers: NexusGenRootTypes['User'][]; // [User!]!
  }
  ShopImage: { // field return type
    id: number; // Int!
    order: number; // Int!
    Shop: NexusGenRootTypes['Shop'] | null; // Shop
    shopId: number | null; // Int
    url: string; // String!
  }
  ShopName: { // field return type
    id: number; // Int!
    lang: string; // String!
    Shop: NexusGenRootTypes['Shop'] | null; // Shop
    shopId: number | null; // Int
    word: string; // String!
  }
  Tag: { // field return type
    Category: NexusGenRootTypes['Category'] | null; // Category
    categoryId: number | null; // Int
    id: number; // Int!
    name: NexusGenRootTypes['TagName'][]; // [TagName!]!
    products: NexusGenRootTypes['Product'][]; // [Product!]!
  }
  TagName: { // field return type
    id: number; // Int!
    lang: string; // String!
    Tag: NexusGenRootTypes['Tag'] | null; // Tag
    tagId: number | null; // Int
    word: string; // String!
  }
  User: { // field return type
    id: number; // Int!
    wishEvents: NexusGenRootTypes['Event'][]; // [Event!]!
    wishProducts: NexusGenRootTypes['Product'][]; // [Product!]!
    wishShops: NexusGenRootTypes['Shop'][]; // [Shop!]!
  }
}

export interface NexusGenArgTypes {
  Category: {
    name: { // args
      skip?: number | null; // Int
    }
    tags: { // args
      skip?: number | null; // Int
    }
  }
  Event: {
    images: { // args
      skip?: number | null; // Int
    }
    videos: { // args
      skip?: number | null; // Int
    }
    wishers: { // args
      skip?: number | null; // Int
    }
  }
  Product: {
    image: { // args
      skip?: number | null; // Int
    }
    name: { // args
      skip?: number | null; // Int
    }
    tags: { // args
      skip?: number | null; // Int
    }
    wishers: { // args
      skip?: number | null; // Int
    }
  }
  Shop: {
    images: { // args
      skip?: number | null; // Int
    }
    name: { // args
      skip?: number | null; // Int
    }
    products: { // args
      skip?: number | null; // Int
    }
    wishers: { // args
      skip?: number | null; // Int
    }
  }
  Tag: {
    name: { // args
      skip?: number | null; // Int
    }
    products: { // args
      skip?: number | null; // Int
    }
  }
  User: {
    wishEvents: { // args
      skip?: number | null; // Int
    }
    wishProducts: { // args
      skip?: number | null; // Int
    }
    wishShops: { // args
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Category" | "CategoryName" | "Event" | "EventImage" | "EventVideo" | "Mutation" | "Product" | "ProductImage" | "ProductName" | "Query" | "Shop" | "ShopImage" | "ShopName" | "Tag" | "TagName" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}